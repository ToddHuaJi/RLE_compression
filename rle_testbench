`timescale 100 ps/ 10 ps



// The `timescale directive specifies that

// the simulation time unit is 100 ps and

// the simulator timestep is 10 ps

// 0.1 is 20 ****** ps

//test clk cycle 20ps


module testbench;

    // signal declaration

    reg clkt, rstt;

    reg recv_readyt, send_readyt;

    reg [7:0] in_datat;

    reg end_of_streamt;

    wire [23:0] out_datat;

    wire rd_reqt, wr_reqt;



    // instantiate the circuit under test

    rle_enc uut

        (.clk(clkt), .rst(rstt), .recv_ready(recv_readyt), .send_ready(send_readyt), .in_data(in_datat), .end_of_stream(end_of_streamt), .out_data(out_datat), .rd_req(rd_reqt), .wr_req(wr_reqt));





    // clock running forever

    always

    begin

    clkt = 1;

    #0.1 clkt =0;

    #0.1;

    // Clock signal assignment



    end



    // reset for a few cycles

    initial

    begin

    rstt = 1; 

    #0.2 rstt = 0;
    

    end_of_streamt = 0;

    // Reset signal assignment



    end



    // test vector generator

    initial

    begin

    

    // test vector 1  count from <--------

    in_datat = 8'b00000000;

    recv_readyt = 1;

    send_readyt = 1;

  
    #4;//(4+2*8) *20   init(1) +readbits(3)+00000000(2*8)
    
    in_datat = 8'b00010000;
   
    
    #5.8;//(3+2*4+2*7+2*2)*20  readbits(3)+0000(2*4)+10(2*7)+(00)2*2
    in_datat = 8'b11110011;
    #6.8;    //(3+7+2+7+2+7+2*3)*20 readbits(3) +1(7)+1(2)+0(7)+0(2)+1(7)+111(2*3)
    in_datat = 8'b10101010;
    #11.8;   //(3+7*8)*20
    end_of_streamt =1;
    recv_readyt =0;
    
    


    // test vector 2



    // test vector n





        $stop;

    end

endmodule 
